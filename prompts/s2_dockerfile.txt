### 2. Dockerfile Implementation
Ensure you examine the existing `Dockerfile` template and honor the instructions and formatting in the template. Create a single `Dockerfile` that adapts to the existing codebase:

- Base image selection based on actual project requirements found in the codebase
  - Consider the project's primary programming language
  - Consider required system dependencies
  - Consider security implications
- Git installation and repository cloning to `/app` directory
- Bash installation required for downstream file runs
- Include installation of the following in the System Dependencies section:
    - python3 – The Python interpreter
    - python3-pip – Python package installer
    - python3-setuptools – Required for building Python projects
    - python-is-python3 – Ensures compatibility where python needs to point to python3
- System package installation as specified in project documentation
- Build tools setup 
- Language-specific package managers

The Dockerfile should:
- Be simple and straightforward (single-stage build)
- Clone the repository to `/app` inside the container
- Update the installation of system dependencies in the `# System Dependencies` section

You should not do the following:
- Edit any code on or below the line `RUN LATEST_COMMIT=$(git rev-list -n 1 --before="2025-03-22" HEAD) && git reset --hard $LATEST_COMMIT`
- Install any project-specific dependencies from package.json, yarn.lock, pnpm-lock.yaml or package-lock.json in the Dockerfile
- Update the entrypoint or command
- Run any tests